{"version":3,"sources":["components/main/Menu.js","screens/HomeScreen.js","env.js","utils/RepositoryClient.js","components/oai-pmh/OAIPHMResponsePanel.js","components/oai-pmh/OAIPMHPanel.js","components/oai-pmh/OAIPMHPanelContainer.js","screens/OAIPMHScreen.js","components/opensearch/OpenSearchResponsePanel.js","components/opensearch/OpenSearchPanel.js","components/opensearch/OpenSearchPanelContainer.js","screens/OpenSearchScreen.js","components/sru/SRUResponsePanel.js","components/sru/SRUPanel.js","components/sru/SRUPanelContainer.js","screens/SRUScreen.js","components/sword/SWORDResponsePanel.js","components/sword/SWORDPanel.js","components/sword/SWORDPanelContainer.js","screens/SWORDScreen.js","App.js","index.js"],"names":["Menu","Navbar","bg","expand","Brand","href","className","Toggle","aria-controls","Collapse","id","Nav","Link","HomeScreen","GATEWAY_URL","RepositoryClient","oaiPmhRequest","uri","a","BASE_URL","fetch","response","text","openSearchRequest","sruRequest","swordRequest","user","pass","headers","Headers","set","base64","encode","method","status","swordStepOne","collection","entry","obo","body","swordStepTwo","edit_iri","restRequest","handle","getFields","xml","verb","error","getElementsByTagName","length","getAttribute","repositoryNameTags","repositoryName","textContent","baseUrls","baseUrl","adminEmails","adminEmail","formats","metadataFormats","index","push","map","x","prefix","schema","namespace","sets","xmlSets","listSetstoken","listSetsresumptionToken","listSetssize","listSetscursor","parseInt","spec","name","xmlHeaders","listIdresumptionToken","listIdsize","listIdcursor","lTokens","listIdtoken","identifier","datestamp","headerSets","y","index2","records","listMetadata","xmlRecords","aMetadataCollection","nextSibling","firstChild","children","aMetadataArray","dc","listRectoken","listRecresumptionToken","listRecsize","listReccursor","Accordion","Card","Header","as","Button","variant","eventKey","toString","Body","tagName","getrecords","getidentifier","getdatestamp","getheaderSets","getxmlSets","getMetadata","getMetadataXml","OAIPMHResponsePanel","OAIPMHPanel","loading","context","parameters","missingMetadataFormat","metadataFormatPresentError","GETQuery","callbacks","target","useRef","Row","Col","md","Form","Group","Label","Control","onChange","onChangeContext","value","Text","onChangeVerb","includes","ref","placeholder","onChangeMetadataPrefix","metadataPrefix","Overlay","current","show","placement","props","Tooltip","onChangeFrom","from","onChangeUntil","until","onChangeIdentifier","onChangeSet","onChangeResumptionToken","resumptionToken","Spinner","animation","role","onClick","onClickLanzar","OAIPMHPanelContainer","getParameters","values","Object","some","reduce","prev","curr","params","slice","e","setState","state","_","parser","DOMParser","xmlDoc","parseFromString","parsedXML","this","Component","OAIPMHScreen","Alert","format","title","link","totalResults","getElementsByTagNameNS","itemsCollection","items","item","itemTitle","itemLink","itemDescription","date","published","Date","toLocaleString","split","parseRss","titlesXml","entriesCollection","entries","authorNamesCollection","authorNames","dateItems","publishedFulls","publishedFull","summary","parseAtom","OpenSearchResponsePanel","OpenSearchPanel","onChangeFormat","defaultValue","rpp","onChangeRpp","onChangeScope","onChangeQuery","label","OpenSearchPanelContainer","scope","query","onChangeOrder","order","OpenSearchScreen","parseDC","itemIndex","metadataTag","metadataXML","metadata","operation","databaseInfo","databaseTitle","databaseDescription","indicesXML","indices","schemaInfoXML","schemas","indexTitle","schemaTitle","schemaName","getExplainFields","numberOfRecords","recordsXML","getSearchRetrieveFields","SRUResponsePanel","SRUPanel","onChangeOperation","onChangeScanClause","onChangeMaximumRecords","onChangeRecordSchema","recordSchema","SRUPanelContainer","scanClause","maximumRecords","SRUScreen","atom","collectionsXML","collections","itTitle","collectionHandle","itTitlexml","getServiceDocumentFields","lastModified","metadataxml","key","getGetFields","getDepositFields","SWORDResponsePanel","SWORDPanel","step","route","endpoint","onChangeUser","type","onChangePass","onChangeObo","onChangeHandle","onChangeTitle","onChangeID","onChangeAuthor","onChangeSummary","onChangeAbstract","onChangeAvailable","SWORDPanelContainer","author","abstract","available","depositStepOne","onChangeFile","file","files","getXMLEntry","editLink","linksXML","parts","SWORDScreen","sleep","ms","Promise","resolve","setTimeout","App","pingGateway","then","r","gateway_online","catch","basename","Container","style","marginTop","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8b5e8a20.chunk.js","sourcesContent":["import React from 'react';\nimport { Nav, Navbar } from 'react-bootstrap';\n\nconst Menu = () => (\n    <Navbar bg=\"dark\" expand=\"lg\">\n            <Navbar.Brand href=\"/\"><span className={\"nav-text\"}>Protocolos</span></Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                    <Nav.Link href=\"/#/oai-pmh\"><span className={\"nav-text\"}>OAI-PMH</span></Nav.Link>\n                </Nav>\n                <Nav className=\"mr-auto\">\n                    <Nav.Link href=\"/#/open-search\"><span className={\"nav-text\"}>OpenSearch</span></Nav.Link>\n                </Nav>\n                <Nav className=\"mr-auto\">\n                    <Nav.Link href=\"/#/sru\"><span className={\"nav-text\"}>SRU</span></Nav.Link>\n                </Nav>\n                <Nav className=\"mr-auto\">\n                    <Nav.Link href=\"/#/sword\"><span className={\"nav-text\"}>SWORD</span></Nav.Link>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n)\n\nexport default Menu;","import React from 'react';\n\nconst HomeScreen = () => (\n    <div>\n        <p>\n            Esta es una colección de clientes para distintos protocolos utilizados para obtención, depósito e intercambio de metadatos en repositorios.<br/>\n            Se puede acceder a cada cliente en el menú superior.\n        </p>\n    </div>\n)\n\nexport default HomeScreen;","export const GATEWAY_URL = \"https://repos-protocols-demo-server.herokuapp.com\";","import base64 from 'base-64';\nimport { GATEWAY_URL } from '../env';\nexport default class RepositoryClient {\n  static oaiPmhRequest = async (uri) => {\n    const BASE_URL = `${GATEWAY_URL}/oai/`;\n    try {\n      const response = await fetch(BASE_URL + uri);\n      return response.text();\n    } catch (error) {\n      return \"<xml><user_message>Ocurrió un error</user_message></xml>\"\n    }\n  }\n\n  static openSearchRequest = async (uri) => {\n    const BASE_URL = `${GATEWAY_URL}/open-search/discover`;\n    try {\n      const response = await fetch(BASE_URL + uri);\n      return response.text();\n    } catch (error) {\n      return \"<xml><user_message>Ocurrió un error</user_message></xml>\"\n    }\n  }\n\n  static sruRequest = async (uri) => {\n    const BASE_URL = `${GATEWAY_URL}/sru`;\n    try {\n      const response = await fetch(BASE_URL + uri);\n      return response.text();\n    } catch (error) {\n      return \"<xml><user_message>Ocurrió un error</user_message></xml>\"\n    }\n  }\n\n  static swordRequest = async (user, pass) => {\n    const BASE_URL = `${GATEWAY_URL}/swordv2`;\n    const headers = new Headers();\n    headers.set('Authorization', 'Basic ' + base64.encode(user + \":\" + pass));\n    const uri = \"/servicedocument\";\n    try {\n      const response = await fetch(BASE_URL + uri, {\n        method: \"GET\",\n        headers: headers\n      });\n      if ((response.status === 401) || (response.status === 403)) {\n        return \"Unauthorized\"\n      }\n      return response.text();\n    } catch (error) {\n      return \"<xml><user_message>Ocurrió un error</user_message></xml>\"\n    }\n  }\n\n  static swordStepOne = async (user, pass, collection, entry, obo = \"\") => {\n    const BASE_URL = `${GATEWAY_URL}/swordv2`;\n    const headers = new Headers();\n    headers.set('Authorization', 'Basic ' + base64.encode(user + \":\" + pass));\n    if (obo !== \"\") {\n      headers.set(\"On-Behalf-Of\", obo);\n    }\n    headers.set(\"In-Progress\", \"true\");\n    headers.set(\"Content-Type\", \"application/atom+xml;type=entry\"); \n    try {\n      const response = await fetch(`${BASE_URL}/collection/${collection}`, {\n        method: \"POST\",\n        headers: headers,\n        body: entry\n      });\n      if ((response.status === 401) || (response.status === 403)) {\n        return \"Unauthorized\"\n      }\n      return response.text();\n    } catch (error) {\n      return \"<xml><user_message>Ocurrió un error</user_message></xml>\"\n    }\n  }\n\n  static swordStepTwo = async (user, pass, edit_iri, obo = \"\") => {\n    const BASE_URL = `${GATEWAY_URL}/swordv2`;\n    const headers = new Headers();\n    headers.set('Authorization', 'Basic ' + base64.encode(user + \":\" + pass));\n    headers.set(\"Content-Length\", 0);\n    headers.set(\"In-Progress\", \"false\");\n    if (obo !== \"\") {\n      headers.set(\"On-Behalf-Of\", obo);\n    }\n    try {\n      const response = await fetch(`${BASE_URL}/edit/${edit_iri}`, {\n        method: \"POST\",\n        headers: headers\n      });\n      if ((response.status === 401) || (response.status === 403)) {\n        return \"Unauthorized\"\n      }\n      if (response.status === 400){\n        return \"Bad Request\";\n      }\n      return response.text();\n    } catch (error) {\n      return \"<xml><user_message>Ocurrió un error</user_message></xml>\"\n    }\n  }\n\n  static restRequest = async (uri, handle) => {\n    const BASE_URL = \"http://localhost:8000/rest\";\n    try {\n      const response = await fetch(BASE_URL + uri + \"/\" + handle + \"?expand=metadata\");\n      return response.text();\n    } catch (error) {\n      return \"<xml><user_message>Ocurrió un error</user_message></xml>\"\n    }\n  }\n}","import React from 'react';\nimport { Accordion, Button, Card } from 'react-bootstrap';\n\nconst getFields = (xml, verb) => {\n  const error = xml.getElementsByTagName(\"error\");\n  if (error.length > 0) {\n    if(error[0].getAttribute(\"code\") === \"noRecordsMatch\") {\n      return \"No hay resultados\";\n    } else {\n      return \"Ocurrió un error. Consulte la respuesta en crudo para ver los detalles.\"\n    }\n  }\n\n  switch (verb) {\n    case \"Identify\":\n      const repositoryNameTags = xml.getElementsByTagName(\"repositoryName\");\n      if (repositoryNameTags.length === 0) {\n        return <span>\"Respuesta incorrecta!\"</span>;\n      }\n      const repositoryName = repositoryNameTags[0].textContent;\n\n      const baseUrls = xml.getElementsByTagName(\"baseURL\");\n      if (baseUrls.length === 0) {\n        return <span>\"Respuesta incorrecta!\"</span>;\n      }\n      const baseUrl = baseUrls[0].textContent;\n\n      const adminEmails = xml.getElementsByTagName(\"adminEmail\");\n      if (adminEmails.length === 0) {\n        return <span>\"Respuesta incorrecta!\"</span>;\n      }\n      const adminEmail = adminEmails[0].textContent;\n\n      return (<ul>\n        <li>\n          <b>Nombre del repositorio [repositoryName]: </b> {repositoryName}\n        </li>\n        <li>\n          <b>URL base (de este contexto) [baseURL]:</b> {baseUrl}\n        </li>\n        <li>\n          <b>Casilla de administración [adminEmail]:</b> {adminEmail}\n        </li>\n      </ul>)\n    case \"ListMetadataFormats\":\n      const formats = [];\n      const metadataFormats = xml.getElementsByTagName(\"metadataFormat\");\n      for (let index = 0; index < metadataFormats.length; index++) {\n        formats.push(metadataFormats[index]);\n      }\n      return (\n        <ul>\n          {formats.map((x, index) => {\n            const prefix = x.getElementsByTagName(\"metadataPrefix\")[0].textContent;\n            const schema = x.getElementsByTagName(\"schema\")[0].textContent;\n            const namespace = x.getElementsByTagName(\"metadataNamespace\")[0].textContent;\n            return (<li key={index}><b>Prefijo:</b> {prefix}\n              <ul>\n                <li>Schema [schema]: {schema}</li>\n                <li>Namespace [metadataNamespace]: {namespace}</li>\n              </ul>\n            </li>)\n          })}\n        </ul>\n      )\n    case \"ListSets\":\n      const sets = [];\n      const xmlSets = xml.getElementsByTagName(\"set\");\n      for (let index = 0; index < xmlSets.length; index++) {\n        sets.push(xmlSets[index]);\n      }\n      let listSetstoken = xml.getElementsByTagName(\"resumptionToken\")[0];\n      let listSetsresumptionToken = listSetstoken.textContent;\n      let listSetssize = listSetstoken.getAttribute(\"completeListSize\");\n      let listSetscursor = listSetstoken.getAttribute(\"cursor\");\n      return (\n        <>\n          <ul>\n            <li>\n              <b>Cantidad total de elementos [completeListSize]: </b> {listSetssize} (100 por página)\n            </li>\n            <li>\n              <b>Token de continuación (tomar nota para pedir la siguiente página) [resumptionToken]:</b> {listSetsresumptionToken}\n            </li>\n            <li>\n              <b>Página [cursor + 1]:</b> {parseInt(listSetscursor) + 1}\n            </li>\n          </ul>\n          <ul>\n            {sets.map((x, index) => {\n              const spec = x.getElementsByTagName(\"setSpec\")[0].textContent;\n              const name = x.getElementsByTagName(\"setName\")[0].textContent;\n              return (<li key={index}><b>Set encontrado No.{index + 1 + parseInt(listSetscursor)}:</b>\n                <ul>\n                  <li>Nombre [setName]: {name}</li>\n                  <li>Identificador [setSpec]: {spec}</li>\n                </ul>\n              </li>)\n            })}\n          </ul>\n        </>);\n    case \"ListIdentifiers\":\n      const headers = [];\n      const xmlHeaders = xml.getElementsByTagName(\"header\");\n      for (let index = 0; index < xmlHeaders.length; index++) {\n        headers.push(xmlHeaders[index]);\n      }\n      const lTokens = xml.getElementsByTagName(\"resumptionToken\");\n      let listIdresumptionToken;\n      let listIdsize;\n      let listIdcursor;\n      if (lTokens.length > 0) {\n        const listIdtoken = lTokens[0];\n        listIdresumptionToken = listIdtoken.textContent;\n        listIdsize = listIdtoken.getAttribute(\"completeListSize\");\n        listIdcursor = listIdtoken.getAttribute(\"cursor\");\n      } else {\n        listIdresumptionToken = \"\";\n        listIdsize = 1;\n        listIdcursor = 0;\n      }\n      return (\n        <>\n          <ul>\n            <li>\n              <b>Cantidad total de elementos [completeListSize]: </b> {listIdsize} (100 por página)\n            </li>\n            <li>\n              <b>Token de continuación (tomar nota para pedir la siguiente página) [resumptionToken]:</b> {listIdresumptionToken}\n            </li>\n            <li>\n              <b>Página [cursor + 1]:</b> {parseInt(listIdcursor) + 1}\n            </li>\n          </ul>\n          <ul>\n            {headers.map((x, index) => {\n              const identifier = x.getElementsByTagName(\"identifier\")[0].textContent;\n              const datestamp = x.getElementsByTagName(\"datestamp\")[0].textContent;\n              const headerSets = []\n              const xmlSets = x.getElementsByTagName(\"setSpec\");\n              for (let index = 0; index < xmlSets.length; index++) {\n                headerSets.push(xmlSets[index]);\n              }\n              return (<li key={index}><b>Recurso encontrado No.{index + 1 + 100 * parseInt(listIdcursor)}:</b>\n                <ul>\n                  <li>Identificador [identifier]: {identifier}</li>\n                  <li>Fecha [datestamp]: {datestamp}</li>\n                  <li>Pertenece a los conjuntos [setSpec]:\n                    <ul>\n                      {headerSets.map((y, index2) =>\n                        <li key={`set-${index}-${index2}`}>\n                          {y.textContent}\n                        </li>)}\n                    </ul>\n                  </li>\n                </ul>\n              </li>\n              )\n            })}\n          </ul>\n        </>);\n    case \"ListRecords\":\n      const records = [];\n      const listMetadata = [];\n      const xmlRecords = xml.getElementsByTagName(\"header\");\n      for (let index = 0; index < xmlRecords.length; index++) {\n        records.push(xmlRecords[index]);\n        const aMetadataCollection = xmlRecords[index].nextSibling.firstChild.children  //Nota: solo funciona si manda primero el header\n        const aMetadataArray = [];\n        for (let index = 0; index < aMetadataCollection.length; index++) {\n          const dc = aMetadataCollection[index];\n          aMetadataArray.push(dc);\n        }\n        listMetadata.push(aMetadataArray);\n      }\n      const listRectoken = xml.getElementsByTagName(\"resumptionToken\")[0];\n      const listRecresumptionToken = listRectoken.textContent;\n      const listRecsize = listRectoken.getAttribute(\"completeListSize\");\n      const listReccursor = listRectoken.getAttribute(\"cursor\");\n      return (\n        <>\n          <ul>\n            <li>\n              <b>Cantidad total de elementos [completeListSize]: </b> {listRecsize} (100 por página)\n            </li>\n            <li>\n              <b>Token de continuación (tomar nota para pedir la siguiente página) [resumptionToken]:</b> {listRecresumptionToken}\n            </li>\n            <li>\n              <b>Página [cursor + 1]:</b> {parseInt(listReccursor) + 1}\n            </li>\n          </ul>\n          <ul>\n            {records.map((x, index) => {\n              const identifier = x.getElementsByTagName(\"identifier\")[0].textContent;\n              const datestamp = x.getElementsByTagName(\"datestamp\")[0].textContent;\n              const headerSets = [];\n              const xmlSets = x.getElementsByTagName(\"setSpec\");\n              for (let index = 0; index < xmlSets.length; index++) {\n                headerSets.push(xmlSets[index]);\n              }\n              return (<li key={index}><b>Recurso encontrado No.{index + 1 + 100 * parseInt(listReccursor)}:</b>\n                <ul>\n                  <li>Identificador [identifier]: {identifier}</li>\n                  <li>Fecha [datestamp]: {datestamp}</li>\n                  <li>Pertenece a los conjuntos [setSpec]:\n                    <ul>\n                      {headerSets.map((y, index2) =>\n                        <li key={`set-${index}-${index2}-1`}>\n                          {y.textContent}\n                        </li>)}\n                    </ul>\n                  </li>\n                  <Accordion>\n                    <Card>\n                      <Card.Header>\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey={toString(index)}>\n                          Metadatos\n                    </Accordion.Toggle>\n                      </Card.Header>\n                      <Accordion.Collapse eventKey={toString(index)}>\n                        <Card.Body>\n                          <ul>\n                            {listMetadata[index].map((y, index2) =>\n                              <li key={`set-${index}-${index2}-2`}>\n                                {y.tagName}: {y.textContent}\n                              </li>)}\n                          </ul>\n                        </Card.Body>\n                      </Accordion.Collapse>\n                    </Card>\n                  </Accordion>\n                </ul>\n              </li>\n              )\n            })}\n          </ul>\n        </>)\n    case \"GetRecord\":\n      const getrecords = xml.getElementsByTagName(\"record\");\n      if (getrecords.length === 0) {\n        return \"No se encontraron registros\";\n      }\n      const getidentifier = getrecords[0].getElementsByTagName(\"identifier\")[0].textContent;\n      const getdatestamp = getrecords[0].getElementsByTagName(\"datestamp\")[0].textContent;\n      const getheaderSets = [];\n      const getxmlSets = getrecords[0].getElementsByTagName(\"setSpec\");\n      for (let index = 0; index < getxmlSets.length; index++) {\n        getheaderSets.push(getxmlSets[index]);\n      }\n      const getMetadata = [];\n      const getMetadataXml = getrecords[0].getElementsByTagName(\"metadata\")[0].firstChild.children;\n      for (let index = 0; index < getMetadataXml.length; index++) {\n        getMetadata.push(getMetadataXml[index]);\n      }\n      return (<><b>Recurso encontrado:</b>\n        <ul>\n          <li>Identificador [identifier]: {getidentifier}</li>\n          <li>Fecha [datestamp]: {getdatestamp}</li>\n          <li>Pertenece a los conjuntos [setSpec]:\n                <ul>\n              {getheaderSets.map((y, index2) =>\n                <li key={`set-${index2}-1`}>\n                  {y.textContent}\n                </li>)}\n            </ul>\n          </li>\n          <Accordion>\n            <Card>\n              <Card.Header>\n                <Accordion.Toggle as={Button} variant=\"link\" eventKey={\"0\"}>\n                  Metadatos\n                </Accordion.Toggle>\n              </Card.Header>\n              <Accordion.Collapse eventKey={\"0\"}>\n                <Card.Body>\n                  <ul>\n                    {getMetadata.map((y, index2) =>\n                      <li key={`set-${index2}-2`}>\n                        {y.tagName}: {y.textContent}\n                      </li>)}\n                  </ul>\n                </Card.Body>\n              </Accordion.Collapse>\n            </Card>\n          </Accordion>\n        </ul>\n      </>\n      )\n    default:\n      break;\n  }\n}\n\nconst OAIPMHResponsePanel = ({ xml, verb }) => {\n  return (\n    <>\n      <h4>Extracto de la respuesta</h4>\n      { getFields(xml, verb)}\n    </>\n  )\n}\n\nexport default OAIPMHResponsePanel;","import React, { useRef } from 'react';\nimport { Accordion, Button, Card, Col, Form, Overlay, Row, Spinner, Tooltip } from 'react-bootstrap';\nimport XMLViewer from 'react-xml-viewer'\nimport OAIPMHResponsePanel from './OAIPHMResponsePanel';\n\nconst OAIPMHPanel = ({ loading, verb, context, parameters, missingMetadataFormat, metadataFormatPresentError, GETQuery, response, xml, callbacks }) => {\n    const target = useRef(null);\n    return (\n        <div>\n            <Row>\n                <h3>URI</h3>\n            </Row>\n            <Row>\n                <Col md={3}>\n                    <Form.Group>\n                        <Form.Label>Contexto [específico de XOAI]</Form.Label>\n                        <Form.Control as=\"select\" onChange={callbacks.onChangeContext}>\n                            <option value=\"request\">Default</option>\n                            <option value=\"driver\">Driver</option>\n                            <option value=\"openaire\">OpenAIRE</option>\n                            <option value=\"snrd\">SNRD</option>\n                            <option value=\"doaj\">DOAJ</option>\n                        </Form.Control>\n                        <Form.Text>El contexto define los esquemas de metadatos disponibles y los items alcanzados [1]</Form.Text>\n                    </Form.Group>\n                </Col>\n                <Col md={6}>\n                    <Form.Group>\n                        <Form.Label>Verbo (verb)</Form.Label>\n                        <Form.Control as=\"select\" onChange={callbacks.onChangeVerb}>\n                            <option value=\"Identify\">Identify: obtener datos del repositorio</option>\n                            <option value=\"ListMetadataFormats\" >ListMetadataFormats: obtener listado de formatos de metadatos</option>\n                            <option value=\"ListSets\">ListSets: obtener listado de conjuntos</option>\n                            <option value=\"ListIdentifiers\">ListIdentifiers: obtener listado de cabeceras de registros</option>\n                            <option value=\"ListRecords\">ListRecords: obtener listado de registros</option>\n                            <option value=\"GetRecord\">GetRecord: obtener un único registro</option>\n                        </Form.Control>\n                        <Form.Text>Los verbos de OAI-PMH son los tipos de peticiones posibles [2]</Form.Text>\n                    </Form.Group>\n                </Col>\n            </Row>\n            { (verb !== \"Identify\") &&\n                <>\n                    <Row>\n                        <h3>Parámetros</h3>\n                    </Row>\n                    <Row>\n                        {[\"GetRecord\", \"ListIdentifiers\", \"ListRecords\"].includes(verb) &&\n                            <Col md={3}>\n                                <Form.Group>\n                                    <Form.Label>Prefijo de metadatos (metadataPrefix)</Form.Label>\n                                    <Form.Control ref={target} as=\"input\" placeholder=\"formato\" onChange={callbacks.onChangeMetadataPrefix} value={parameters.metadataPrefix} />\n                                    <Overlay target={target.current} show={missingMetadataFormat} placement=\"right\">\n                                        {(props) => (\n                                            <Tooltip id=\"overlay\" {...props}>\n                                                El prefijo de metadatos es obligatorio\n                                            </Tooltip>\n                                        )}\n                                    </Overlay>\n                                    <Overlay target={target.current} show={metadataFormatPresentError} placement=\"right\">\n                                        {(props) => (\n                                            <Tooltip id=\"overlay\" {...props}>\n                                                El prefijo de metadatos no va en esta petición\n                                            </Tooltip>\n                                        )}\n                                    </Overlay>\n                                    <Form.Text>Esquema de metadatos a usar [3]. Se puede consultar los esquemas disponibles para el contexto elegido usando ListMetadataFormats.</Form.Text>\n                                </Form.Group>\n                            </Col>\n                        }\n                        {[\"ListIdentifiers\", \"ListRecords\"].includes(verb) &&\n                            <Col md={3}>\n                                <Form.Group>\n                                    <Form.Label>A partir de [opcional] (from)</Form.Label>\n                                    <Form.Control as=\"input\" placeholder=\"YYYY-MM-DD\" onChange={callbacks.onChangeFrom} value={parameters.from} />\n                                    <Form.Text>Trae los elementos con fecha de creación o modificiación posterior a la indicada.</Form.Text>\n                                </Form.Group>\n                            </Col>\n                        }\n                        {[\"ListIdentifiers\", \"ListRecords\"].includes(verb) &&\n                            <Col md={3}>\n                                <Form.Group>\n                                    <Form.Label>Hasta [opcoinal] (until) </Form.Label>\n                                    <Form.Control as=\"input\" placeholder=\"YYYY-MM-DD\" onChange={callbacks.onChangeUntil} value={parameters.until} />\n                                    <Form.Text>Trae los elementos con fecha de creación o modificación anterior a la indicada.</Form.Text>\n                                </Form.Group>\n                            </Col>\n                        }\n                        {[\"GetRecord\", \"ListMetadataFormats\"].includes(verb) &&\n                            <Col md={3}>\n                                <Form.Group>\n                                    <Form.Label>Identificador del elemento (identifier)</Form.Label>\n                                    <Form.Control as=\"input\" placeholder=\"oai:sedici.unlp.edu.ar:10915/1234\" onChange={callbacks.onChangeIdentifier} value={parameters.identifier} />\n                                    <Form.Text>Especifica cuál registro traer. En el caso de Metadata Formats, son los formatos disponibles para ese elemento (opcional).</Form.Text>\n                                </Form.Group>\n                            </Col>\n                        }\n                        {[\"ListIdentifiers\", \"ListRecords\"].includes(verb) &&\n                            <Col md={3}>\n                                <Form.Group>\n                                    <Form.Label>Conjunto [opcional] (set)</Form.Label>\n                                    <Form.Control as=\"input\" onChange={callbacks.onChangeSet} value={parameters.set} />\n                                    <Form.Text>Especifica de qué conjunto se traerán los registros o los identificadores. Se puede obtener desde ListSets.</Form.Text>\n                                </Form.Group>\n                            </Col>\n                        }\n                    </Row>\n                    <Row>\n                        {[\"ListIdentifiers\", \"ListRecords\", \"ListSets\"].includes(verb) &&\n                            <Col md={3}>\n                                <Form.Group>\n                                    <Form.Label>Token de continuación [opcional] (resumptionToken)</Form.Label>\n                                    <Form.Control as=\"input\" onChange={callbacks.onChangeResumptionToken} value={parameters.resumptionToken} />\n                                    <Form.Text>Indica desde dónde empezar el listado. Se obtiene del resultado anterior.</Form.Text>\n                                </Form.Group>\n                            </Col>\n                        }\n                    </Row>\n                </>\n            }\n\n            <Row>\n                <h3>Petici&oacute;n</h3>\n            </Row>\n            <Row>\n                <Col>\n                    <span>http://sedici.unlp.edu.ar/oai/<b>{context}</b>?verb=<b>{verb}</b>{GETQuery && `&${GETQuery}`}</span>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    {loading ? <Spinner animation=\"border\" role=\"status\"/> : <Button onClick={callbacks.onClickLanzar}>Lanzar petición</Button>}\n                </Col>\n            </Row>\n            {(response !== \"\") &&\n                <>\n                    <Row>\n                        <Col>\n                            <Accordion>\n                                <Card>\n                                    <Card.Header>\n                                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\n                                            Ver respuesta en crudo\n                            </Accordion.Toggle>\n                                    </Card.Header>\n                                    <Accordion.Collapse className={\"xml-card\"} eventKey=\"0\">\n                                        <Col>\n                                            <XMLViewer xml={response} />\n                                        </Col>\n                                    </Accordion.Collapse>\n                                </Card>\n                            </Accordion>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <OAIPMHResponsePanel xml={xml} verb={verb} />\n                        </Col>\n                    </Row>\n                </>\n            }\n            <Row>\n                <Col>\n                    <h3>Referencias</h3>\n                    <ol>\n                        <li>\n                            <a href=\"https://wiki.lyrasis.org/display/DSDOC5x/OAI+2.0+Server\">DSPACE OAI 2.0 Server Docs</a>\n                        </li>\n                        <li>\n                            <a href=\"http://www.openarchives.org/OAI/openarchivesprotocol.html#ProtocolMessages\">OAI docs - Protocol Messages</a>\n                        </li>\n                        <li>\n                            <a href=\"http://www.openarchives.org/OAI/openarchivesprotocol.html#MetadataNamespaces\">OAI docs - Metadata Namespaces</a>\n                        </li>\n                    </ol>\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nexport default OAIPMHPanel;","import React, { Component } from 'react';\nimport RepositoryClient from '../../utils/RepositoryClient';\nimport OAIPMHPanel from './OAIPMHPanel';\nclass OAIPMHPanelContainer extends Component {\n    constructor() {\n        super();\n        this.state = {\n            loading: false,\n            context: \"request\",\n            verb: \"Identify\",\n            parameters: {\n                metadataPrefix: \"\",\n                from: \"\",\n                until: \"\",\n                identifier: \"\",\n                set: \"\",\n                resumptionToken: \"\"\n            },\n            missingMetadataFormat: false,\n            metadataFormatPresentError: false,\n            GETQuery: \"\",\n            response: \"\",\n            parsedXML: null\n        }\n    }\n\n    getParameters = (parameters = []) => {\n        const values = Object.values(parameters);\n        if (values.length === 0) {\n            return \"\";\n        }\n        const some = values.reduce((prev, curr) => (curr !== \"\") || prev);\n        const params = some &&\n            `${(parameters.metadataPrefix !== \"\") ? `metadataPrefix=${parameters.metadataPrefix}&` :\n                \"\"}${(parameters.from !== \"\") ? `from=${parameters.from}&` :\n                    \"\"}${(parameters.until !== \"\") ? `until=${parameters.until}&` :\n                        \"\"}${(parameters.identifier !== \"\") ? `identifier=${parameters.identifier}&` :\n                            \"\"}${(parameters.set !== \"\") ? `set=${parameters.set}&` :\n                                \"\"}${(parameters.resumptionToken !== \"\") ? `resumptionToken=${parameters.resumptionToken}&` :\n                                    \"\"}`;\n        if (params[params.length - 1] === \"&\") {\n            return params.slice(0, params.length - 1);\n        } else {\n            return params;\n        }\n    }\n\n    onChangeContext = (e) => {\n        this.setState({\n            context: e.target.value\n        })\n    }\n\n    onChangeVerb = (e) => {\n        this.setState({\n            verb: e.target.value,\n            parameters: {\n                metadataPrefix: \"\",\n                from: \"\",\n                until: \"\",\n                identifier: \"\",\n                set: \"\",\n                resumptionToken: \"\"\n            },\n            GETQuery: \"\",\n            response: \"\",\n        })\n    }\n\n    onChangeMetadataPrefix = (e) => {\n        const params = this.state.parameters;\n        params.metadataPrefix = e.target.value;\n        this.setState({\n            parameters: params,\n            GETQuery: this.getParameters(params),\n            missingMetadataFormat: (params.metadataPrefix === \"\") && (this.state.parameters.resumptionToken === \"\"),\n            metadataFormatPresentError: (params.metadataPrefix !== \"\") && (this.state.parameters.resumptionToken !== \"\")\n        })\n    }\n\n    onChangeFrom = (e) => {\n        const params = this.state.parameters;\n        params.from = e.target.value;\n        this.setState({\n            parameters: params,\n            GETQuery: this.getParameters(params)\n        })\n    }\n\n    onChangeUntil = (e) => {\n        const params = this.state.parameters;\n        params.until = e.target.value;\n        this.setState({\n            parameters: params,\n            GETQuery: this.getParameters(params)\n        })\n    }\n\n    onChangeIdentifier = (e) => {\n        const params = this.state.parameters;\n        params.identifier = e.target.value;\n        this.setState({\n            parameters: params,\n            GETQuery: this.getParameters(params)\n        })\n    }\n\n    onChangeSet = (e) => {\n        const params = this.state.parameters;\n        params.set = e.target.value;\n        this.setState({\n            parameters: params,\n            GETQuery: this.getParameters(params)\n        })\n    }\n\n    onChangeResumptionToken = (e) => {\n        const params = this.state.parameters;\n        params.resumptionToken = e.target.value;\n        this.setState({\n            parameters: params,\n            GETQuery: this.getParameters(params)\n        })\n    }\n\n    onClickLanzar = async _ => {\n        if ([\"GetRecord\", \"ListIdentifiers\", \"ListRecords\"].includes(this.state.verb)) {\n            if ((this.state.parameters.metadataPrefix === \"\")\n                && (this.state.parameters.resumptionToken === \"\")) {\n                this.setState({\n                    missingMetadataFormat: true\n                })\n                return;\n            }\n            if ((this.state.parameters.metadataPrefix !== \"\")\n                && (this.state.parameters.resumptionToken !== \"\")) {\n                this.setState({\n                    metadataFormatPresentError: true\n                })\n                return;\n            }\n        }\n        this.setState({\n            loading: true\n        })\n        const response = await RepositoryClient.oaiPmhRequest(`${this.state.context}?verb=${this.state.verb}${this.state.GETQuery !== \"\" ? \"&\" : \"\"}${this.state.GETQuery}`);\n        this.setState({\n            loading: false\n        })\n        const parser = new DOMParser();\n        const xmlDoc = parser.parseFromString(response, \"text/xml\");\n        const error = xmlDoc.getElementsByTagName(\"parsererror\");\n        const parsedXML = error.length > 0 ? null : xmlDoc;\n        this.setState({ response, parsedXML })\n    }\n\n    render() {\n        return (\n            <OAIPMHPanel callbacks={{\n                onChangeVerb: this.onChangeVerb,\n                onChangeContext: this.onChangeContext,\n                onChangeMetadataPrefix: this.onChangeMetadataPrefix,\n                onChangeFrom: this.onChangeFrom,\n                onChangeUntil: this.onChangeUntil,\n                onChangeIdentifier: this.onChangeIdentifier,\n                onChangeSet: this.onChangeSet,\n                onChangeResumptionToken: this.onChangeResumptionToken,\n                onClickLanzar: this.onClickLanzar,\n            }}\n                verb={this.state.verb}\n                context={this.state.context}\n                parameters={this.state.parameters}\n                missingMetadataFormat={this.state.missingMetadataFormat}\n                metadataFormatPresentError={this.state.metadataFormatPresentError}\n                GETQuery={this.state.GETQuery}\n                response={this.state.response}\n                xml={this.state.parsedXML}\n                loading={this.state.loading}\n            />\n        )\n    }\n}\n\nexport default OAIPMHPanelContainer;","import React from 'react';\nimport { Alert} from 'react-bootstrap';\nimport OAIPMHPanelContainer from '../components/oai-pmh/OAIPMHPanelContainer';\n\nconst OAIPMHScreen = () => (\n    <div>\n        <h2>OAI-PMH</h2>\n        <Alert variant={\"info\"}>OAI-PMH es un prococolo usado para cosecha de metadatos. Notar que se usa para obtención masiva de metadatos, no para buscar.</Alert>\n        <OAIPMHPanelContainer/>\n    </div>\n)\n\nexport default OAIPMHScreen;","import React from 'react';\n\nconst parseRss = xml => {\n    const channels = xml.getElementsByTagName(\"channel\");\n    if ((channels.length === 0)) {\n        return \"No se puede interpretar la respuesta\"\n    }\n    const title = xml.getElementsByTagName(\"title\")[0].textContent;\n    const link = xml.getElementsByTagName(\"link\")[0].textContent;\n    const totalResults = xml.getElementsByTagNameNS(\"http://a9.com/-/spec/opensearch/1.1/\", \"totalResults\")[0].textContent;\n    const itemsCollection = xml.getElementsByTagName(\"item\");\n    const items = [];\n    for (let index = 0; index < itemsCollection.length; index++) {\n        items.push(itemsCollection[index]);\n    }\n    return (<div>\n        <h2>Feed RSS</h2>\n        <h3><a href={link}>{title}</a> ({totalResults} elementos)</h3>\n        {items.map(item => {\n            const itemTitle = item.getElementsByTagName(\"title\")[0].textContent;\n            const itemLink = item.getElementsByTagName(\"link\")[0].textContent;\n            const itemDescription = item.getElementsByTagName(\"description\")[0].textContent;\n            const date = item.getElementsByTagNameNS(\"http://purl.org/dc/elements/1.1/\", \"date\")[0].textContent;\n            const published = (new Date(date)).toLocaleString(\"es\").split(\" \")[0];\n            return (<div>\n                <h5>{itemTitle} [<a href={itemLink}>Enlace</a>]</h5>\n                <ul>\n                    <li>Publicado: {published}</li>\n                    <p>{itemDescription}</p>\n                </ul>\n            </div>)\n        })}\n    </div>)\n}\n\nconst parseAtom = xml => {\n    const titlesXml = xml.getElementsByTagName(\"title\");\n    if ((titlesXml.length === 0) || (titlesXml[0].textContent === \"An error has occurred\")) {\n        return \"No se puede interpretar la respuesta\"\n    }\n    const id = xml.getElementsByTagName(\"id\")[0].textContent;\n    const title = titlesXml[0].textContent;\n    const totalResults = xml.getElementsByTagNameNS(\"http://a9.com/-/spec/opensearch/1.1/\", \"totalResults\")[0].textContent;\n    const entriesCollection = xml.getElementsByTagName(\"entry\");\n    const entries = [];\n    for (let index = 0; index < entriesCollection.length; index++) {\n        entries.push(entriesCollection[index]);\n    }\n    return (<div>\n        <h2>Feed Atom</h2>\n        <h3><a href={id}>{title}</a> ({totalResults} elementos)</h3>\n        {entries.map((item, index) => {\n            const itemTitle = item.getElementsByTagName(\"title\")[0].textContent;\n            const itemLink = item.getElementsByTagName(\"id\")[0].textContent;\n            const authorNamesCollection = item.getElementsByTagName(\"name\");\n            const authorNames = [];\n            const dateItems = item.getElementsByTagNameNS(\"http://purl.org/dc/elements/1.1/\", \"date\")\n            let published;\n            if (dateItems.length > 0) {\n                const date = dateItems[0].textContent;\n                published = (new Date(date)).toLocaleString(\"es\").split(\" \")[0];\n            } else {\n                const publishedFulls = item.getElementsByTagName(\"published\");\n                if (publishedFulls.length > 0) {\n                    const publishedFull = publishedFulls[0].textContent;\n                    published = (new Date(publishedFull)).toLocaleString(\"es\").split(\" \")[0];\n                } else {\n                    published = \"(no disponible)\";\n                }\n            }\n            const summary = item.getElementsByTagName(\"summary\")[0].textContent;\n            for (let index = 0; index < authorNamesCollection.length; index++) {\n                authorNames.push(authorNamesCollection[index]);\n\n            }\n            return (<div>\n                <h5>{itemTitle} [<a href={itemLink}>Enlace</a>]</h5>\n                <ul>\n                    <li>Publicado: {published}</li>\n                    <li>Autor{(authorNames.length > 1) && \"es\"}: {authorNames.map(item => item.textContent).reduce((x, y) => `${x}; ${y}`)}</li>\n                    <p>{summary}</p>\n                </ul>\n            </div>)\n        })}\n    </div>)\n}\n\nconst getFields = (xml, format) => {\n\n\n    switch (format) {\n        case \"rss\":\n            return parseRss(xml);\n        case \"atom\":\n            return parseAtom(xml);\n        default:\n            break;\n    }\n}\n\nconst OpenSearchResponsePanel = ({ xml, format }) => (\n    <>\n        { getFields(xml, format)}\n    </>\n);\n\nexport default OpenSearchResponsePanel","import React from 'react';\nimport { Accordion, Button, Card, Col, Form, Row, Spinner } from 'react-bootstrap';\nimport XMLViewer from 'react-xml-viewer'\nimport OpenSearchResponsePanel from './OpenSearchResponsePanel';\n\nconst OpenSearchPanel = ({ loading, parameters, GETQuery, response, xml, callbacks }) => {\n    return (\n        <div>\n            <Row>\n                <h3>Parámetros</h3>\n            </Row>\n            <Row>\n                <Col md={3}>\n                    <Form.Group>\n                        <Form.Label>Formato (format)</Form.Label>\n                        <Form.Control as=\"select\" onChange={callbacks.onChangeFormat}>\n                            <option value=\"atom\">Atom</option>\n                            <option value=\"rss\">RSS</option>\n                        </Form.Control>\n                        <Form.Text>Formato de la respuesta, apto para interactuar con lectores de sindicación o plugins.</Form.Text>\n                    </Form.Group>\n                </Col>\n                <Col md={3}>\n                    <Form.Group>\n                        <Form.Label>Resultados por página (rpp)</Form.Label>\n                        <Form.Control as=\"input\" defaultValue={parameters.rpp} onChange={callbacks.onChangeRpp} />\n                    </Form.Group>\n                </Col>\n                <Col md={3}>\n                    <Form.Group>\n                        <Form.Label>Colección o comunidad (scope)</Form.Label>\n                        <Form.Control as=\"input\" placeholder=\"10915/36\" onChange={callbacks.onChangeScope} />\n                        <Form.Text>Pista: usar ListSets en el panel de OAI-PMH, las colecciones (col) o comunidades (com) que salen como com_AAAAA_BBB tienen como handle AAAAA/BBB.</Form.Text>\n                    </Form.Group>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Form.Group>\n                        <Form.Label>Consulta (query)</Form.Label>\n                        <Form.Control as=\"input\" onChange={callbacks.onChangeQuery} />\n                    </Form.Group>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Accordion>\n                        <Card>\n                            <Card.Header>\n                                <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\n                                    Referencia para el campo Consulta\n                            </Accordion.Toggle>\n                            </Card.Header>\n                            <Accordion.Collapse className={\"query-reference\"} eventKey=\"1\">\n                                <Col>\n                                    Formato (siempre entre paréntesis):\n                                <ul>\n                                        <li>\n                                            Búsqueda por campo de metadatos (sólo funcionan algunos campos):\n                                            <pre>(dc.subject:\"Object-oriented Programming\")</pre>\n                                            <pre>(dc.title:\"Parte-del-titulo\")</pre>\n                                            <pre>(sedici.subtype: \"Tesis de grado\")</pre>\n                                        </li>\n                                        <li>\n                                            Búsqueda libre:\n                                            <pre>(\"Microservicios\")</pre>\n                                        </li>\n                                        <li>\n                                            Búsqueda combinada:\n                                            <pre>((sedici.subtype: \"Tesis de grado\") AND (dc.subject:\"Microservicios\"))</pre>\n                                        </li>\n                                    </ul>\n                                    <p>\n\n                                    </p>\n                                </Col>\n                            </Accordion.Collapse>\n                        </Card>\n                    </Accordion>\n                </Col>\n            </Row>\n            <Row>\n                <h3>Petici&oacute;n</h3>\n            </Row>\n            <Row>\n                <Col>\n                    <span>http://sedici.unlp.edu.ar/open-search/discover?{GETQuery}</span>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    {loading? <Spinner animation=\"border\" role=\"status\"/> : <Button onClick={callbacks.onClickLanzar}>Lanzar petición</Button>}\n                </Col>\n            </Row>\n            {(response !== \"\") &&\n                <>\n                    <Row>\n                        <Col>\n                            <Accordion>\n                                <Card>\n                                    <Card.Header>\n                                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\n                                            Ver respuesta en crudo\n                            </Accordion.Toggle>\n                                    </Card.Header>\n                                    <Accordion.Collapse className={\"xml-card\"} eventKey=\"0\">\n                                        <Col>\n                                            <XMLViewer xml={response} />\n                                        </Col>\n                                    </Accordion.Collapse>\n                                </Card>\n                            </Accordion>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <OpenSearchResponsePanel xml={xml} label=\"Feed\" format={parameters.format} />\n                        </Col>\n                    </Row>\n                </>\n            }\n        </div>\n    )\n}\n\nexport default OpenSearchPanel;","import React, { Component } from 'react';\nimport RepositoryClient from '../../utils/RepositoryClient';\nimport OpenSearchPanel from './OpenSearchPanel';\nclass OpenSearchPanelContainer extends Component {\n    constructor() {\n        super();\n        this.state = {\n            parameters: {\n                format: \"atom\",\n                query: \"\",\n                scope: \"\",\n                rpp: \"10\"\n            },\n            GETQuery: \"format=atom&rpp=10\",\n            response: \"\",\n            parsedXML: null,\n            loading: false\n        }\n    }\n\n    getParameters = (parameters = []) => {\n        const values = Object.values(parameters);\n        if (values.length === 0) {\n            return \"\";\n        }\n        const some = values.reduce((prev, curr) => (curr !== \"\") || prev);\n        const params = some &&\n            `${(parameters.format !== \"\") ? `format=${parameters.format}&` :\n                \"\"}${(parameters.scope !== \"\") ? `scope=${parameters.scope}&` :\n                    \"\"}${(parameters.query !== \"\") ? `query=${parameters.query}&` :\n                        \"\"}${(parameters.rpp !== \"\") ? `rpp=${parameters.rpp}&` :\n                            \"\"}`;\n        if (params[params.length - 1] === \"&\") {\n            return params.slice(0, params.length - 1);\n        } else {\n            return params;\n        }\n    }\n\n    onChangeFormat = (e) => {\n        const params = this.state.parameters;\n        params.format = e.target.value;\n        this.setState({\n            parameters: params,\n            GETQuery: this.getParameters(params),\n            response: \"\"\n        })\n    }\n\n    onChangeQuery = (e) => {\n        const params = this.state.parameters;\n        params.query = e.target.value;\n        this.setState({\n            parameters: params,\n            GETQuery: this.getParameters(params)\n        })\n    }\n\n    onChangeScope = (e) => {\n        const params = this.state.parameters;\n        params.scope = e.target.value;\n        this.setState({\n            parameters: params,\n            GETQuery: this.getParameters(params)\n        })\n    }\n\n    onChangeRpp = (e) => {\n        const params = this.state.parameters;\n        params.rpp = e.target.value;\n        this.setState({\n            parameters: params,\n            GETQuery: this.getParameters(params)\n        })\n    }\n\n    onChangeOrder = (e) => {\n        const params = this.state.parameters;\n        params.order = e.target.value;\n        this.setState({\n            parameters: params,\n            GETQuery: this.getParameters(params)\n        })\n    }\n\n    onClickLanzar = async _ => {\n        this.setState({\n            loading: true\n        })\n        const response = await RepositoryClient.openSearchRequest(`?${this.state.GETQuery}`);\n        this.setState({\n            loading: false\n        })\n        const parser = new DOMParser();\n        const xmlDoc = parser.parseFromString(response, \"text/xml\");\n        const error = xmlDoc.getElementsByTagName(\"parsererror\");\n        const parsedXML = error.length > 0 ? null : xmlDoc;\n        this.setState({ response, parsedXML })\n    }\n\n    render() {\n        return (\n            <OpenSearchPanel callbacks={{\n                onChangeFormat: this.onChangeFormat,\n                onChangeScope: this.onChangeScope,\n                onChangeQuery: this.onChangeQuery,\n                onClickLanzar: this.onClickLanzar,\n            }}\n                parameters={this.state.parameters}\n                GETQuery={this.state.GETQuery}\n                response={this.state.response}\n                xml={this.state.parsedXML}\n                loading={this.state.loading}\n            />\n        )\n    }\n}\n\nexport default OpenSearchPanelContainer;","import React from 'react';\nimport { Alert } from 'react-bootstrap';\nimport OpenSearchPanelContainer from '../components/opensearch/OpenSearchPanelContainer';\n\nconst OpenSearchScreen = () => (\n    <div>\n        <h2>OpenSearch</h2>\n        <Alert variant={\"info\"}>OpenSearch es una tecnología utilizada para realizar búsquedas sobre los recursos del repositorio. <br />\n        La URL resultante puede cargarse en cualquier lector de noticias RSS/Atom.</Alert>\n        <OpenSearchPanelContainer />\n    </div>\n)\n\nexport default OpenSearchScreen;","import React from 'react';\nimport { Accordion, Button, Card } from 'react-bootstrap';\n\nconst getExplainFields = (xml) => {\n  const databaseInfo = xml.getElementsByTagName(\"databaseInfo\")[0];\n  const databaseTitle = databaseInfo.getElementsByTagName(\"title\")[0].textContent;\n  const databaseDescription = databaseInfo.getElementsByTagName(\"description\")[0].textContent;\n\n  const indexInfo = xml.getElementsByTagName(\"indexInfo\")[0];\n  const indicesXML = indexInfo.getElementsByTagName(\"index\");\n  const indices = [];\n  for (let index = 0; index < indicesXML.length; index++) {\n    indices.push(indicesXML[index]);\n  }\n\n  const schemaInfoXML = xml.getElementsByTagName(\"schemaInfo\")[0].children;\n  const schemas = [];\n  for (let index = 0; index < schemaInfoXML.length; index++) {\n    schemas.push(schemaInfoXML[index]);\n  }\n\n  return (<div>\n    <h4>{databaseTitle}</h4>\n    <p><i>{databaseDescription}</i></p>\n    <b>Índices (indexInfo)</b>\n    <ul>\n      {indices.map((item, index) => {\n        const indexTitle = item.getElementsByTagName(\"title\")[0].textContent;\n        const schema = item.getElementsByTagName(\"name\")[0].getAttribute(\"set\");\n        return (<li key={index}>\n          {schema}.{indexTitle}\n        </li>)\n      })}\n    </ul>\n    <b>Información sobre esquemas disponibles (schemaInfo)</b>\n    <ul>\n      {schemas.map((item, index) => {\n        const schemaTitle = item.getElementsByTagName(\"title\")[0].textContent;\n        const schemaName = item.getAttribute(\"name\");\n        return (<li key={index}>\n          Esquema: {schemaTitle} ({schemaName})\n        </li>)\n      })}\n    </ul>\n  </div>)\n}\n\nconst getScanFields = (xml) => {\n  return (<div>\n    <b>Scan (no soportado)</b>\n  </div>)\n}\n\nconst getSearchRetrieveFields = (xml, format) => {\n  const numberOfRecords = xml.getElementsByTagNameNS(\"http://docs.oasis-open.org/ns/search-ws/sruResponse\", \"numberOfRecords\")[0].textContent;\n  if (numberOfRecords === \"0\") {\n    return (<div>\n      <b>{numberOfRecords} Resultados</b>\n    </div>)\n  }\n  const recordsXML = xml.getElementsByTagNameNS(\"http://docs.oasis-open.org/ns/search-ws/sruResponse\", \"record\");\n  if (recordsXML.length === 0) {\n    return (<div>\n      <b>{numberOfRecords} Resultados</b>\n      <p>Para obtener los registros, defina el esquema de metadatos y la cantidad de registros.</p>\n    </div>)\n  }\n  const records = [];\n  for (let index = 0; index < recordsXML.length; index++) {\n    records.push(recordsXML[index]);\n  }\n  return (<div>\n    <b>{numberOfRecords} Resultados</b>\n    <ul>\n      {records.map((item, index) => {\n        switch (format) {\n          case \"dc\":\n            return parseDC(item, index);\n          default:\n            return (<li>\n              (formato no implementado, usar dc (DublinCore))\n            </li>)\n        }\n      })}\n    </ul>\n  </div>)\n}\n\nconst parseDC = (xml, itemIndex) => {\n  const metadataTag = xml.getElementsByTagNameNS(\"info:srw/schema/1/dc-schema\", \"dc\")[0];\n  const metadataXML = metadataTag.children;\n  const metadata = [];\n  for (let index = 0; index < metadataXML.length; index++) {\n    metadata.push(metadataXML[index]);\n  }\n  const title = metadataTag.getElementsByTagName(\"title\")[0].textContent;\n  return (<li>\n    {title}\n    <Accordion>\n      <Card>\n        <Card.Header>\n          <Accordion.Toggle as={Button} variant=\"link\" eventKey={toString(itemIndex)}>\n            Metadatos\n                </Accordion.Toggle>\n        </Card.Header>\n        <Accordion.Collapse eventKey={toString(itemIndex)}>\n          <Card.Body>\n            <ul>\n              {metadata.map((y, index2) =>\n                <li key={`set-${index2}-2`}>\n                  {y.tagName}: {y.textContent}\n                </li>)}\n            </ul>\n          </Card.Body>\n        </Accordion.Collapse>\n      </Card>\n    </Accordion>\n  </li>)\n}\n\nconst getFields = (xml, operation, format) => {\n  const diagnostics = xml.getElementsByTagNameNS(\"http://docs.oasis-open.org/ns/search-ws/sruResponse\", \"diagnostics\");\n  if (diagnostics.length > 0) {\n    return (\n      \"Ocurrió un error. Consulte la respuesta en crudo para ver los detalles.\"\n    )\n  }\n  switch (operation) {\n    case \"explain\":\n      return getExplainFields(xml);\n    case \"scan\":\n      return getScanFields(xml);\n    case \"searchRetrieve\":\n      return getSearchRetrieveFields(xml, format);\n    default:\n      break;\n  }\n}\n\nconst SRUResponsePanel = ({ xml, operation, format }) => {\n  return (\n    <>\n      { getFields(xml, operation, format)}\n    </>\n  )\n}\n\nexport default SRUResponsePanel;","import React from 'react';\nimport { Accordion, Button, Card, Col, Form, Row, Spinner } from 'react-bootstrap';\nimport XMLViewer from 'react-xml-viewer'\nimport SRUResponsePanel from './SRUResponsePanel';\n\nconst SRUPanel = ({ loading, parameters, GETQuery, response, xml, callbacks }) => {\n    return (\n        <div>\n            <Row>\n                <h3>URI</h3>\n            </Row>\n            <Row>\n                <Col md={6}>\n                    <Form.Group>\n                        <Form.Label>Operación (operation)</Form.Label>\n                        <Form.Control as=\"select\" onChange={callbacks.onChangeOperation}>\n                            <option value=\"explain\">Explain: obtener datos del repositorio</option>\n                            <option value=\"searchRetrieve\">SearchRetrieve: obtener listado de registros</option>\n                            <option value=\"scan\">Scan: obtener términos cercanos (no siempre está soportado)</option>\n                        </Form.Control>\n                        <Form.Text>Tipos de operaciones posibles [1]</Form.Text>\n                    </Form.Group>\n                </Col>\n            </Row>\n            { (parameters.operation !== \"explain\") &&\n                <>\n                    <Row>\n                        <h3>Parámetros</h3>\n                    </Row>\n                    {(parameters.operation === \"scan\") &&\n                        <Row>\n                            <Col md={3}>\n                                <Form.Group>\n                                    <Form.Label>Condición de escaneo (scanClause)</Form.Label>\n                                    <Form.Control as=\"input\" onChange={callbacks.onChangeScanClause} />\n                                    <Form.Text>Término según el cual se va a escanear</Form.Text>\n                                </Form.Group>\n                            </Col>\n                        </Row>\n                    }\n                    {(parameters.operation === \"searchRetrieve\") &&\n                        <>\n                            <Row>\n                                <Col md={3}>\n                                    <Form.Group>\n                                        <Form.Label>Cantidad de registros (maximumRecords)</Form.Label>\n                                        <Form.Control as=\"input\" onChange={callbacks.onChangeMaximumRecords} />\n                                        <Form.Text>Cantidad de registros a mostrar.</Form.Text>\n                                    </Form.Group>\n                                </Col>\n                                <Col md={3}>\n                                    <Form.Group>\n                                        <Form.Label>Esquema de metadatos (recordSchema)</Form.Label>\n                                        <Form.Control as=\"input\" onChange={callbacks.onChangeRecordSchema} />\n                                        <Form.Text>Necesario para mostrar los registros. Pista: buscar con Explain los formatos disponibles (marcxml - dc - mods2 - mods).</Form.Text>\n                                    </Form.Group>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col md={6}>\n                                    <Form.Group>\n                                        <Form.Label>Consulta (query)</Form.Label>\n                                        <Form.Control as=\"input\" onChange={callbacks.onChangeQuery} />\n                                        <Form.Text>\n                                            Consulta a realizar. Los campos a consultar están listados en Índices al hacer una petición Explain.<br />\n                                            Ejemplos:\n                                            <ul>\n                                                <li>dc.title=microservices</li>\n                                                <li>dc.author=newman</li>\n                                                <li>dc.author=newman and microservices</li>\n                                                <li>bath.isbn=978-1-491-95035-7</li>\n                                            </ul>\n                                        </Form.Text>\n                                    </Form.Group>\n                                </Col>\n                            </Row>\n                        </>\n                    }\n                </>\n            }\n\n            <Row>\n                <h3>Petici&oacute;n</h3>\n            </Row>\n            <Row>\n                <Col>\n                    <span>https://sru.api.melinda.kansalliskirjasto.fi/bib?{GETQuery}</span>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    {loading ? <Spinner animation=\"border\" role=\"status\" /> : <Button onClick={callbacks.onClickLanzar}>Lanzar petición</Button>}\n                </Col>\n            </Row>\n            {\n                (response !== \"\") &&\n                <>\n                    <Row>\n                        <Col>\n                            <Accordion>\n                                <Card>\n                                    <Card.Header>\n                                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\n                                            Ver respuesta en crudo\n                            </Accordion.Toggle>\n                                    </Card.Header>\n                                    <Accordion.Collapse className={\"xml-card\"} eventKey=\"0\">\n                                        <Col>\n                                            <XMLViewer xml={response} />\n                                        </Col>\n                                    </Accordion.Collapse>\n                                </Card>\n                            </Accordion>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <SRUResponsePanel xml={xml} operation={parameters.operation} format={parameters.recordSchema} />\n                        </Col>\n                    </Row>\n                </>\n            }\n            <Row>\n                <Col>\n                    <h3>Referencias</h3>\n                    <ol>\n                        <li>\n                            <a href=\"http://www.loc.gov/standards/sru/index.html\">SRU- Search/Retrieve via URL</a>\n                        </li>\n                    </ol>\n                </Col>\n            </Row>\n        </div >\n    )\n}\n\nexport default SRUPanel;","import React, { Component } from 'react';\nimport RepositoryClient from '../../utils/RepositoryClient';\nimport SRUPanel from './SRUPanel';\n\nclass SRUPanelContainer extends Component {\n    constructor() {\n        super();\n        this.state = {\n            parameters: {\n                operation: \"explain\",\n                scanClause: \"\",\n                query: \"\",\n                maximumRecords: \"\",\n                recordSchema: \"\"\n            },\n            GETQuery: \"operation=explain\",\n            response: \"\",\n            parsedXML: null,\n            loading: false\n        }\n    }\n\n    getParameters = (parameters = []) => {\n        const values = Object.values(parameters);\n        if (values.length === 0) {\n            return \"\";\n        }\n        const some = values.reduce((prev, curr) => (curr !== \"\") || prev);\n        const params = some &&\n            `${(parameters.operation !== \"\") ? `operation=${parameters.operation}&` :\n                \"\"}${(parameters.scanClause !== \"\") ? `scanClause=${parameters.scanClause}&` :\n                    \"\"}${(parameters.maximumRecords !== \"\") ? `maximumRecords=${parameters.maximumRecords}&` :\n                        \"\"}${(parameters.recordSchema !== \"\") ? `recordSchema=${parameters.recordSchema}&` :\n                            \"\"}${(parameters.query !== \"\") ? `query=${parameters.query}&` :\n                                \"\"}`;\n        if (params[params.length - 1] === \"&\") {\n            return params.slice(0, params.length - 1);\n        } else {\n            return params;\n        }\n    }\n\n    onChangeOperation = (e) => {\n        this.setState({\n            parameters: {\n                operation: e.target.value,\n                scanClause: \"\",\n                query: \"\",\n                maximumRecords: \"\",\n                recordSchema: \"\"\n            },\n            GETQuery: `operation=${e.target.value}`,\n            response: \"\",\n        })\n    }\n\n    onChangeScanClause = (e) => {\n        const params = this.state.parameters;\n        params.scanClause = e.target.value;\n        this.setState({\n            parameters: params,\n            GETQuery: this.getParameters(params)\n        })\n    }\n\n    onChangeQuery = (e) => {\n        const params = this.state.parameters;\n        params.query = e.target.value;\n        this.setState({\n            parameters: params,\n            GETQuery: this.getParameters(params)\n        })\n    }\n\n    onChangeMaximumRecords = (e) => {\n        const params = this.state.parameters;\n        params.maximumRecords = e.target.value;\n        this.setState({\n            parameters: params,\n            GETQuery: this.getParameters(params)\n        })\n    }\n\n    onChangeRecordSchema = (e) => {\n        const params = this.state.parameters;\n        params.recordSchema = e.target.value;\n        this.setState({\n            parameters: params,\n            GETQuery: this.getParameters(params),\n            response: \"\"\n        })\n    }\n\n    onClickLanzar = async _ => {\n        this.setState({\n            loading: true\n        })\n        const response = await RepositoryClient.sruRequest(`?${this.state.GETQuery}`);\n        this.setState({\n            loading: false\n        })\n        const parser = new DOMParser();\n        const xmlDoc = parser.parseFromString(response, \"text/xml\");\n        const error = xmlDoc.getElementsByTagName(\"parsererror\");\n        const parsedXML = error.length > 0 ? null : xmlDoc;\n        this.setState({ response, parsedXML })\n    }\n\n    render() {\n        return (\n            <SRUPanel callbacks={{\n                onChangeOperation: this.onChangeOperation,\n                onChangeScanClause: this.onChangeScanClause,\n                onChangeQuery: this.onChangeQuery,\n                onChangeMaximumRecords: this.onChangeMaximumRecords,\n                onChangeRecordSchema: this.onChangeRecordSchema,\n                onClickLanzar: this.onClickLanzar,\n            }}\n                parameters={this.state.parameters}\n                GETQuery={this.state.GETQuery}\n                response={this.state.response}\n                xml={this.state.parsedXML}\n                loading={this.state.loading}\n            />\n        )\n    }\n}\n\nexport default SRUPanelContainer;","import React from 'react';\nimport { Alert } from 'react-bootstrap';\nimport SRUPanelContainer from '../components/sru/SRUPanelContainer';\n\nconst SRUScreen = () => (\n    <div>\n        <h2>SRU</h2>\n        <Alert variant={\"info\"}>SRU es una tecnología utilizada para realizar búsquedas sobre los recursos del repositorio.</Alert>\n        <SRUPanelContainer />\n    </div>\n)\n\nexport default SRUScreen;","import React from 'react';\nconst atom = \"http://www.w3.org/2005/Atom\";\nconst getServiceDocumentFields = (xml) => {\n  const title = xml.getElementsByTagNameNS(atom, \"title\")[0].textContent;\n  const collectionsXML = xml.getElementsByTagName(\"collection\");\n  const collections = [];\n  for (let index = 0; index < collectionsXML.length; index++) {\n    collections.push(collectionsXML[index]);\n  }\n  return (\n    <>\n      <h3>Service Document (Colecciones disponibles)</h3>\n      <h4>{title} (Nombre: ID de collección)</h4>\n      <ul>\n        {collections.map((item, index) => {\n          const href = item.getAttribute(\"href\");\n          const split = href.split(\"/\");\n          const collectionHandle = `${split[split.length - 2]}/${split[split.length - 1]}`;\n          const itTitlexml = item.getElementsByTagNameNS(atom, \"title\");\n          let itTitle;\n          if (itTitlexml.length === 0) {\n            itTitle = \"(Título no disponible)\"\n          } else {\n            itTitle = itTitlexml[0].textContent;\n          }\n          return (<li>{itTitle}: {collectionHandle}</li>)\n        })}\n      </ul>\n    </>\n  )\n}\nconst getGetFields = (xml) => {\n  const name = xml.getElementsByTagName(\"name\")[0].textContent;\n  const lastModified = xml.getElementsByTagName(\"lastModified\")[0].textContent;\n  const metadataxml = xml.getElementsByTagName(\"metadata\");\n  const metadata = [];\n  for (let index = 0; index < metadataxml.length; index++) {\n    metadata.push(metadataxml[index]);  \n  }\n  return (<>\n  <ul>\n    <li>Título: {name}</li>\n    <li>\n      Modificado por última vez: {lastModified}\n    </li>\n    <li>\n      Metadatos:\n      <ul>\n        {metadata.map((item, index) =>{\n          const key = item.getElementsByTagName(\"key\")[0].textContent;\n          const value = item.getElementsByTagName(\"value\")[0].textContent;\n          return (<li key={index}>{key}: {value}</li>)\n        })\n        }\n      </ul>\n    </li>\n  </ul>\n  </>)\n}\n\nconst getDepositFields = (xml) => {\n  if(xml) {\n    const treatment = xml.getElementsByTagName(\"treatment\")[0].textContent;\n    return(\n      \"Resultado: \" + treatment\n    )\n  } else {\n    return \"error\"\n  }\n}\n\nconst getFields = (xml, operation) => {\n  switch (operation) {\n    case \"servicedocument\":\n      return getServiceDocumentFields(xml);\n    case \"get\":\n      return getGetFields(xml);\n    case \"deposit\": \n      return getDepositFields(xml);\n    default:\n      break;\n  }\n}\n\nconst SWORDResponsePanel = ({ xml, operation, format }) => {\n  return (\n    <>\n      { getFields(xml, operation, format)}\n    </>\n  )\n}\n\nexport default SWORDResponsePanel;","import React from 'react';\nimport { Accordion, Button, Card, Col, Form, Row, Spinner } from 'react-bootstrap';\nimport XMLViewer from 'react-xml-viewer'\nimport base64 from 'base-64';\nimport SWORDResponsePanel from './SWORDResponsePanel';\n\nconst SWORDPanel = ({ entry, loading, user, pass, step, operation, route, endpoint, handle, response, xml, callbacks }) => {\n    return (\n        <div>\n            <Row>\n                <Col md={6}>\n                    <Form.Group>\n                        <Form.Label>Operación</Form.Label>\n                        <Form.Control as=\"select\" onChange={callbacks.onChangeOperation}>\n                            <option value=\"servicedocument\">Obtener colecciones disponibles (servicedocument)</option>\n                            <option value=\"deposit\">Depositar</option>\n                            <option value=\"get\">Comprobar depósito (via REST, ajeno a SWORD)</option>\n                        </Form.Control>\n                        <Form.Text>Tipos de operaciones posibles [1]</Form.Text>\n                    </Form.Group>\n                </Col>\n            </Row>\n            {operation !== \"get\" &&\n                <>\n                    <Row>\n                        <h3>Headers</h3>\n                    </Row>\n                    <Row>\n                        <Col md={3}>\n                            <Form.Group>\n                                <Form.Label>Usuario</Form.Label>\n                                <Form.Control as=\"input\" onChange={callbacks.onChangeUser} />\n                                <Form.Text><ul>\n                                    <li>\n                                        dspacedemo+admin[at]gmail.com [2]\n                            </li>\n                                    <li>\n                                        dspacedemo+submit[at]gmail.com [2]\n                                </li>\n                                </ul></Form.Text>\n                            </Form.Group>\n                        </Col>\n                        <Col md={3}>\n                            <Form.Group>\n                                <Form.Label>Contraseña</Form.Label>\n                                <Form.Control as=\"input\" type=\"password\" onChange={callbacks.onChangePass} />\n                                <Form.Text>Empieza con dsp y termina con ace (6 letras) [2]</Form.Text>\n                            </Form.Group>\n                        </Col>\n                        {(operation === \"deposit\") &&\n                            <Col md={3}>\n                                <Form.Group>\n                                    <Form.Label>En nombre de (opcional)</Form.Label>\n                                    <Form.Control as=\"input\" onChange={callbacks.onChangeObo} />\n                                    <Form.Text>En nombre de quién se deposita el archivo</Form.Text>\n                                </Form.Group>\n                            </Col>\n                        }\n                    </Row>\n                </>\n            }\n            <Row>\n                <h3>URI</h3>\n            </Row>\n            <Row>\n                {(operation === \"deposit\") && (step === 1) &&\n                    <Col md={3}>\n                        <Form.Group>\n                            <Form.Label>Colección</Form.Label>\n                            <Form.Control as=\"input\" onChange={callbacks.onChangeHandle} />\n                            <Form.Text>Obtenga el listado de las colecciones posibles con la operación servicedocument</Form.Text>\n                        </Form.Group>\n                    </Col>\n                }\n                {operation === \"get\" &&\n                    <Col md={3}>\n                        <Form.Group>\n                            <Form.Label>Recurso</Form.Label>\n                            <Form.Control as=\"input\" onChange={callbacks.onChangeHandle} />\n                            <Form.Text>Handle del recurso que acaba de crear</Form.Text>\n                        </Form.Group>\n                    </Col>\n                }\n            </Row>\n            {(operation === \"deposit\") && (step === 1) &&\n                <>\n                    <Row>\n                        <h3>Cuerpo</h3>\n                    </Row>\n                    <Row>\n                        <h5>Metadatos</h5>\n                    </Row>\n                    <Row>\n                        <Col md={3}>\n                            <Form.Group>\n                                <Form.Label>Título</Form.Label>\n                                <Form.Control as=\"input\" onChange={callbacks.onChangeTitle} />\n                                <Form.Text>Título del recurso</Form.Text>\n                            </Form.Group>\n                        </Col>\n                        <Col md={3}>\n                            <Form.Group>\n                                <Form.Label>ID</Form.Label>\n                                <Form.Control as=\"input\" onChange={callbacks.onChangeID} />\n                                <Form.Text>Identificador del recurso</Form.Text>\n                            </Form.Group>\n                        </Col>\n                        <Col md={3}>\n                            <Form.Group>\n                                <Form.Label>Autor</Form.Label>\n                                <Form.Control as=\"input\" onChange={callbacks.onChangeAuthor} />\n                                <Form.Text>Nombre completo del autor</Form.Text>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col md={3}>\n                            <Form.Group>\n                                <Form.Label>Descripción (summary)</Form.Label>\n                                <Form.Control as=\"input\" onChange={callbacks.onChangeSummary} />\n                                <Form.Text>Descripción del recurso</Form.Text>\n                            </Form.Group>\n                        </Col>\n                        <Col md={3}>\n                            <Form.Group>\n                                <Form.Label>Abstract</Form.Label>\n                                <Form.Control as=\"input\" onChange={callbacks.onChangeAbstract} />\n                                <Form.Text>Abstract del recurso</Form.Text>\n                            </Form.Group>\n                        </Col>\n                        <Col md={3}>\n                            <Form.Group>\n                                <Form.Label>Disponible desde</Form.Label>\n                                <Form.Control as=\"input\" onChange={callbacks.onChangeAvailable} />\n                                <Form.Text>Desde cuando está disponible el recurso</Form.Text>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row>\n                    </Row>\n                </>\n            }\n            <Row>\n                <h3>Petici&oacute;n</h3>\n            </Row>\n            <Row>\n                <Col>\n                    <span>http://demo.dspace.org/{route}/{endpoint}/{[\"get\", \"deposit\"].includes(operation) && handle}{operation === \"get\" && \"?expand=metadata\"}</span>\n                    <h5>Headers</h5>\n                    <ul>\n                        <li>Authorization: Basic {base64.encode(`${user}:${pass}`)}</li>\n                    </ul>\n                    {((operation === \"deposit\") && (step === 1)) &&\n                        <>\n                            <h5>Cuerpo de la petición</h5>\n                            <Accordion>\n                                <Card>\n                                    <Card.Header>\n                                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\n                                            Ver cuerpo en crudo\n                            </Accordion.Toggle>\n                                    </Card.Header>\n                                    <Accordion.Collapse className={\"xml-card\"} eventKey=\"1\">\n                                        <Col>\n                                            <XMLViewer xml={entry} />\n                                        </Col>\n                                    </Accordion.Collapse>\n                                </Card>\n                            </Accordion>\n                        </>\n                    }\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    {loading ? <Spinner animation=\"border\" role=\"status\" /> : <Button onClick={callbacks.onClickLanzar}>Lanzar petición</Button>}\n                </Col>\n            </Row>\n            {\n                (response !== \"\") &&\n                <>\n                    <Row>\n                        <Col>\n                            <Accordion>\n                                <Card>\n                                    <Card.Header>\n                                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\n                                            Ver respuesta en crudo\n                            </Accordion.Toggle>\n                                    </Card.Header>\n                                    <Accordion.Collapse className={\"xml-card\"} eventKey=\"0\">\n                                        <Col>\n                                            <XMLViewer xml={response} />\n                                        </Col>\n                                    </Accordion.Collapse>\n                                </Card>\n                            </Accordion>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            {xml &&\n                                <SWORDResponsePanel xml={xml} operation={operation} />\n                            }\n                        </Col>\n                    </Row>\n                </>\n            }\n            <Row>\n                <Col>\n                    <h3>Referencias</h3>\n                    <ol>\n                        <li>\n                            <a href=\"https://github.com/swordapp/swordappv2-php-library/blob/521f12baf8b9fb9fe0fd1ea3fb9f2dd399433722/examples/archivematica/archivematica.php\">swordappv2-php-library archivematica.php</a>\n                        </li>\n                        <li>\n                            <a href=\"http://demo.dspace.org/xmlui/\">DSPACE Demo UI</a>\n                        </li>\n                        <li>\n                            <a href=\"https://wiki.lyrasis.org/display/DSDOC6x/SWORDv2+Server\">DSPACE 6 SWORD Docs</a>\n                        </li>\n                        <li>\n                            <a href=\"https://github.com/swordapp/swordappv2-php-library/blob/521f12baf8b9fb9fe0fd1ea3fb9f2dd399433722/swordappclient.php\">swordappv2-php-library SWORDAPPClient.php</a>\n                        </li>\n                    </ol>\n                </Col>\n            </Row>\n        </div >\n    )\n}\n\nexport default SWORDPanel;","import React, { Component } from 'react';\nimport RepositoryClient from '../../utils/RepositoryClient';\nimport SWORDPanel from './SWORDPanel';\n\nclass SWORDPanelContainer extends Component {\n    constructor() {\n        super();\n        this.state = {\n            endpoint: \"servicedocument\",\n            route: \"swordv2\",\n            user: \"\",\n            pass: \"\",\n            obo: \"\",\n            operation: \"servicedocument\",\n            handle: \"\",\n            response: \"\",\n            parsedXML: null,\n            loading: false,\n            file: \"\",\n            step: 1,\n            editLink: \"\",\n            metadata: {\n                title: \"\",\n                id: \"\",\n                author: \"\",\n                summary: \"\",\n                abstract: \"\",\n                available: \"\"\n            }\n        }\n    }\n\n    onChangeOperation = (e) => {\n        let endpoint;\n        switch (e.target.value) {\n            case \"servicedocument\":\n                endpoint = \"servicedocument\";\n                break;\n            case \"deposit\":\n                endpoint = \"collection\";\n                break;\n            case \"get\":\n                endpoint = \"handle\";\n                break;\n            default:\n                break;\n        }\n        this.setState({\n            operation: e.target.value,\n            response: \"\",\n            route: e.target.value === \"get\" ? \"rest\" : \"swordv2\",\n            endpoint\n        })\n    }\n\n    onChangeUser = (e) => {\n        this.setState({\n            user: e.target.value,\n        })\n    }\n\n    onChangeTitle = (e) => {\n        const metadata = this.state.metadata;\n        metadata.title = e.target.value;\n        this.setState({\n            metadata\n        })\n    }\n\n    onChangeID = (e) => {\n        const metadata = this.state.metadata;\n        metadata.id = e.target.value;\n        this.setState({\n            metadata\n        })\n    }\n\n    onChangeAuthor = (e) => {\n        const metadata = this.state.metadata;\n        metadata.author = e.target.value;\n        this.setState({\n            metadata\n        })\n    }\n\n    onChangeSummary = (e) => {\n        const metadata = this.state.metadata;\n        metadata.summary = e.target.value;\n        this.setState({\n            metadata\n        })\n    }\n\n    onChangeAbstract = (e) => {\n        const metadata = this.state.metadata;\n        metadata.abstract = e.target.value;\n        this.setState({\n            metadata\n        })\n    }\n\n    onChangeAvailable = (e) => {\n        const metadata = this.state.metadata;\n        metadata.available = e.target.value;\n        this.setState({\n            metadata\n        })\n    }\n\n    onChangePass = (e) => {\n        this.setState({\n            pass: e.target.value,\n        })\n    }\n\n    onChangeHandle = (e) => {\n        this.setState({\n            handle: e.target.value,\n        })\n    }\n\n    depositStepOne = async () => {\n\n    }\n\n    onChangeFile = (e) => {\n        this.setState({\n            file: e.target.files[0]\n        })\n    }\n\n    getXMLEntry = _ => {\n        return (\n            `<?xml version=\"1.0\"?>\n<entry xmlns=\"http://www.w3.org/2005/Atom\" xmlns:dcterms=\"http://purl.org/dc/terms/\">\n<title>${this.state.metadata.title}</title>\n<id>${this.state.metadata.id}</id>\n<author><name>${this.state.metadata.author}</name></author>\n<summary>${this.state.metadata.summary}</summary>\n<dcterms:abstract>${this.state.metadata.abstract}</dcterms:abstract>\n<dcterms:available>${this.state.metadata.available}</dcterms:available>\n<dcterms:creator>${this.state.metadata.author}</dcterms:creator>\n<dcterms:identifier>${this.state.metadata.id}</dcterms:identifier>\n<dcterms:title>${this.state.metadata.title}</dcterms:title>\n</entry>`\n        );\n    }\n\n\n    onClickLanzar = async _ => {\n        this.setState({\n            loading: true\n        })\n        let response;\n        switch (this.state.operation) {\n            case \"get\":\n                response = await RepositoryClient.restRequest(\"/handle\", this.state.handle);\n                break;\n            case \"servicedocument\":\n                response = await RepositoryClient.swordRequest(this.state.user, this.state.pass);\n                break;\n            case \"deposit\":\n                switch (this.state.step) {\n                    case 1:\n                        this.setState({\n                            editLink: \"\"\n                        })\n                        const entry = this.getXMLEntry();\n                        response = await RepositoryClient.swordStepOne(this.state.user, this.state.pass, this.state.handle, entry, this.state.obo, this.state.file);\n                        break;\n                    case 2:\n                        response = await RepositoryClient.swordStepTwo(this.state.user, this.state.pass, this.state.editLink, this.state.obo);\n                        break;\n                    default:\n                        break;\n                }\n                break;\n            default:\n                response = \"\";\n                break;\n        }\n        this.setState({\n            loading: false\n        })\n        const parser = new DOMParser();\n        if (response === \"Unauthorized\") {\n            this.setState({\n                response: \"<xml><error>No autorizado</error></xml>\",\n                parsedXML: null\n            });\n            return;\n        } else if (response === \"Bad Request\") {\n            this.setState({\n                response: \"<xml><error>Petición errónea</error></xml>\",\n                parsedXML: null\n            });\n            return;\n        } else {\n            if (response.includes(\"ERROR\")) {\n                this.setState({\n                    response: \"<xml><error>Petición errónea</error></xml>\",\n                    parsedXML: null\n                });\n                return;\n            }\n            if (this.state.operation === \"deposit\") {\n                this.setState({\n                    step: response.includes(\"has been created\") ? 2 : 1\n                })\n            }\n            const xmlDoc = parser.parseFromString(response, \"text/xml\");\n            const error = xmlDoc.getElementsByTagName(\"parsererror\");\n            const parsedXML = error.length > 0 ? null : xmlDoc;\n            if (parsedXML) {\n                if ((this.state.operation === \"deposit\") && (this.state.step === 2)) {\n                    const linksXML = parsedXML.getElementsByTagName(\"link\");\n                    for (let index = 0; index < linksXML.length; index++) {\n                        if (linksXML[index].getAttribute(\"rel\") === \"edit\") {\n                            const parts = linksXML[index].getAttribute(\"href\").split(\"/\");\n                            this.setState({\n                                editLink: parts[parts.length - 1]\n                            })\n                            break;\n                        }\n                    }\n                }\n            }\n            this.setState({ response, parsedXML })\n        }\n    }\n\n    render() {\n        return (\n            <SWORDPanel callbacks={{\n                onChangeOperation: this.onChangeOperation,\n                onChangeUser: this.onChangeUser,\n                onChangePass: this.onChangePass,\n                onChangeHandle: this.onChangeHandle,\n                onChangeFile: this.onChangeFile,\n                onChangeTitle: this.onChangeTitle,\n                onChangeID: this.onChangeID,\n                onChangeAuthor: this.onChangeAuthor,\n                onChangeSummary: this.onChangeSummary,\n                onChangeAbstract: this.onChangeAbstract,\n                onChangeAvailable: this.onChangeAvailable,\n                onClickLanzar: this.onClickLanzar,\n            }}\n                operation={this.state.operation}\n                response={this.state.response}\n                xml={this.state.parsedXML}\n                loading={this.state.loading}\n                endpoint={this.state.endpoint}\n                route={this.state.route}\n                user={this.state.user}\n                pass={this.state.pass}\n                handle={this.state.handle}\n                step={this.state.step}\n                entry={this.getXMLEntry()}\n            />\n        )\n    }\n}\n\nexport default SWORDPanelContainer;","import React from 'react';\nimport { Alert } from 'react-bootstrap';\nimport SWORDPanelContainer from '../components/sword/SWORDPanelContainer';\n\nconst SWORDScreen = () => (\n    <div>\n        <h2>SWORD</h2>\n        <Alert variant={\"info\"}>SWORD es una tecnología utilizada para realizar depósito remoto de documentos en el repositorio.</Alert>\n        <SWORDPanelContainer />\n    </div>\n)\n\nexport default SWORDScreen;","import React, { Component } from 'react';\nimport { Route, HashRouter } from 'react-router-dom';\nimport { Container } from 'react-bootstrap'\nimport './App.css';\nimport Menu from './components/main/Menu';\nimport HomeScreen from './screens/HomeScreen';\nimport OAIPMHScreen from './screens/OAIPMHScreen';\nimport OpenSearchScreen from './screens/OpenSearchScreen';\nimport SRUScreen from './screens/SRUScreen';\nimport SWORDScreen from './screens/SWORDScreen';\nimport { GATEWAY_URL } from './env';\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      gateway_online: false\n    }\n  }\n  \n  pingGateway = async () => {\n    fetch(GATEWAY_URL)\n      .then(r => this.setState({\n        gateway_online: true\n      }))\n      .catch(async e => {\n        await sleep(15000);\n        this.pingGateway();\n      })\n  }\n  \n  componentDidMount() {\n    this.pingGateway()\n  }\n\n  render() {\n    return (\n      <HashRouter basename=\"/\">\n        <Menu />\n        {this.state.gateway_online ?\n          <Container style={{ marginTop: '1em' }}>\n            <Route path=\"/\" exact component={HomeScreen} />\n            <Route path=\"/oai-pmh\" exact component={OAIPMHScreen} />\n            <Route path=\"/open-search\" exact component={OpenSearchScreen} />\n            <Route path=\"/sru\" exact component={SRUScreen} />\n            <Route path=\"/sword\" exact component={SWORDScreen} />\n          </Container>\n          : <div>\n            Esperando al gateway... (<a href={GATEWAY_URL}>{GATEWAY_URL}</a>)\n        </div>\n        }\n      </HashRouter>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}